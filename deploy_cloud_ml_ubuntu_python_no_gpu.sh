#-------------------------------------------------------------------------------
# Machine Learning environment setup (without GPU support)
#
# Author: Igor Ivanov
# email: vecxoz@gmail.com
# MIT License
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Set up color output
#-------------------------------------------------------------------------------

GR='\033[0;32m'     # green
NC='\033[0m'        # no color

function echo_color {
    echo -e "${GR}$1${NC}\n"
}

#-------------------------------------------------------------------------------
# Start message
#-------------------------------------------------------------------------------

echo -e "
${GR}--------------------------------------------------------------------------------${NC}
This script sets up Machine Learning environment on Ubuntu (tested on 14.04)
with Python and NumPy stack, without GPU support.
--------------------------------------------------------------------------------
${GR}!!! Important.${NC}
    To have correct setup, you should source this script, i.e. to run as follows
    $ . ./deploy.sh
    If you ran script in different way, please press Ctrl+C and rerun properly.
    ${GR}Script can be stopped at any point using Ctrl+C. You can run it again later.${NC}
--------------------------------------------------------------------------------
Please choose Python version (2 or 3) below (if not sure - choose 3).
Downloaded data for chosen version will be saved in ~/py2 or ~/py3 respectively.
Script will download about 2 GB of data and take about 30 minutes 
(depending on the machine and internet connection speed).
Output of most commands is suppressed: only warnings and errors are shown.
You will see some warnings - it's normal. You should start to worry only
if you see some message in red color.
${GR}All Python packages (except PIP) are installed for current user only.${NC}
After installation, you can call Python version you need and corresponding PIP 
by running in terminal commands: <python2> and <pip2>, or <python3> and <pip3>.
You can call Jupyter with following command: <jupyter>.
--------------------------------------------------------------------------------
${GR}!!! Important.${NC}
    You can make two runs of this script and have packages for both 
    versions installed, but in this case some packages may NOT work properly.
    Examples of pitfalls:
    1). Some packages may have single settings file in your home dir for
        Python 2 and Python 3, so changes in this file will affect both versions
    2). Jupyter, probably, will have ability to run only Python
        version, which was installed the last.
    However, most of the packages, probably, will demonstrate normal behavior.
--------------------------------------------------------------------------------
The following tools will be installed:
  gcc, g++, make, cmake, git, Java and Python with following packages:
    scikit-learn, XGBoost, LightGBM, Theano, TensorFlow, Keras, RGF, FastRGF,
    Wovpal Wabbit, gplearn, Hyperopt, skopt, NLTK, Jupyter, etc.
    The list of installed Python packages and versions will be shown at the end.
--------------------------------------------------------------------------------
Access Jupyter running in cloud from local machine via SSH tunnel:

1). Log into your cloud machine via SSH with port forwarding:
        $ ssh -L 9999:localhost:8888 username@111.111.111.111
2). Start Jupyter notebook on cloud machine:
        $ jupyter notebook --no-browser
3). Navigate to localhost:9999 in your browser on local machine
4). Copy and paste token generated by Jupyter to login
${GR}--------------------------------------------------------------------------------${NC}
"

#-------------------------------------------------------------------------------
# Choose version
#-------------------------------------------------------------------------------

read -p "Please, choose action: continue with v.2 (input 2), v.3 (input 3), cancel (press Ctrl+C) " choice
case $choice in
    2 )
        
        workdir=~/py2
        mkdir $workdir
        cd $workdir

        # Create varables to call correct version of python and pip
        run_python=python2
        run_pip=pip2
        
        echo_color "-> STARTED"
        echo_color "-> USING: $($run_python --version 2>&1)"
        
        ;;
        
    * )
        
        workdir=~/py3
        mkdir $workdir
        cd $workdir
        
        # Create varables to call correct version of python and pip
        run_python=python3
        run_pip=pip3
        
        echo_color "-> STARTED"
        echo_color "-> USING: $($run_python --version)"
        
        ;;

esac

#-------------------------------------------------------------------------------
# Solving issue [unable to resolve host ...]
# Uncomment if you need
#-------------------------------------------------------------------------------

# echo_color "-> Solving issue \"unable to resolve host\"
#    This issue could be observed in some cloud environments"

# sudo bash -c 'echo -e "\n127.0.1.1\t$(hostname)\n" >> /etc/hosts'

#-------------------------------------------------------------------------------
# Updating local package index
#-------------------------------------------------------------------------------

echo_color "-> Updating apt-get"

{
sudo apt-get update
} > /dev/null

#-------------------------------------------------------------------------------
# Installing newest Python version
#-------------------------------------------------------------------------------

# sudo apt-add-repository -y ppa:fkrull/deadsnakes
# sudo apt-get update

# sudo apt-get -y install python2.7 python2.7-dev
# sudo apt-get install python3.6 python3.6-dev

# After that can we have:
#
# python2 --version # Python 2.7.6
# python3 --version # Python 3.4.3
# python3.6 --version # Python 3.6.0

#-------------------------------------------------------------------------------
# Installing system packages
#-------------------------------------------------------------------------------

echo_color "-> Installing system packages (htop, gcc, g++, make, cmake, etc.)"

{
sudo apt-get -y install htop                            # System resource monitor
sudo apt-get -y install gcc                             # C compiler
sudo apt-get -y install g++                             # C++ compiler
sudo apt-get -y install make                            # make utility
sudo apt-get -y install cmake                           # Cross-platform copilation
sudo apt-get -y install git                             # Git

sudo apt-get -y install python-dev                      # depend on: python, python2.7-dev
sudo apt-get -y install python3-dev                     # depend on: python3, python3.4-dev

sudo apt-get -y install libboost-program-options-dev    # Boost (e.g. to build Vowpal Wabbit)
sudo apt-get -y install libboost-python-dev             # Boost (e.g. to build Vowpal Wabbit)
sudo apt-get -y install zlib1g-dev                      # Zlib (e.g. to build Vowpal Wabbit)
sudo apt-get -y install libssl-dev                      # To build scrapy
sudo apt-get -y install libffi-dev                      # To build something
sudo apt-get -y install build-essential                 # Just in case
} > /dev/null

#-------------------------------------------------------------------------------
# Java
#-------------------------------------------------------------------------------

echo_color "-> Installing Java"

{
sudo apt-get -y install default-jre                     # Java runtime (OpenJDK)
# sudo apt-get -y install default-jdk                   # Java dev (OpenJDK)
} > /dev/null

# java -version
#
# java version "1.7.0_121"
# OpenJDK Runtime Environment (IcedTea 2.6.8) (7u121-2.6.8-1ubuntu0.14.04.3)
# OpenJDK 64-Bit Server VM (build 24.121-b00, mixed mode)

#-------------------------------------------------------------------------------
# PIP
#-------------------------------------------------------------------------------

echo_color "-> Installing PIP"

{
sudo apt-get -y install python-pip                      # Get old pip to upgrade it then by itself (triggers intallation of g++ and others)
sudo apt-get -y install python3-pip                     # For Python 3
} > /dev/null

sudo pip2 -q install --upgrade pip                      # Get newest pip (old pip stays in place too)
sudo pip3 -q install --upgrade pip                      # For Python 3

# or
# curl -O https://bootstrap.pypa.io/get-pip.py          # Get get-pip.py
# python2 get-pip.py                                    # Install pip
# python3 get-pip.py                                    # For Python 3

hash -r                                                 # Forget old pip

#-------------------------------------------------------------------------------
# Installing Python packages for current user
#-------------------------------------------------------------------------------

echo_color "-> Installing python packages from PyPI"

echo_color "-> Numerical stack (NumPy, SciPy, Pandas)"

$run_pip -q install --user numpy                        # BLAS, ndarrays
$run_pip -q install --user scipy                        # statistics, optimization
$run_pip -q install --user pandas                       # DataFrame, Series, rolling statistics
$run_pip -q install --user sympy                        # Symbolic derivatives
$run_pip -q install --user cython                       # Python -> C++ (as dependency of some other packages)

#-------------------------------------------------------------------------------
# Graphics
#-------------------------------------------------------------------------------

echo_color "-> Graphics (matplotlib, seaborn)"

$run_pip -q install --user matplotlib                   # Visualization (for Jupyter)
$run_pip -q install --user seaborn                      # Visualization (for Jupyter)

#-------------------------------------------------------------------------------
# ML
#-------------------------------------------------------------------------------

echo_color "-> General purpose machine learning (scikit-learn, statsmodels, hyperopt)"

$run_pip -q install --user scikit-learn                 # Almost all ML algos we ever need
$run_pip -q install --user tables                       # pandas.HDFStore
$run_pip -q install --user SQLAlchemy                   # SQL
$run_pip -q install --user statsmodels                  # Time series, stationarity, ARIMA
$run_pip -q install --user ml_metrics                   # Metrics
$run_pip -q install --user vecstack                     # Simple wrapper for stacking routines
$run_pip -q install --user hyperopt                     # Hyperparameter optimization
$run_pip -q install --user bayesian-optimization        # Hyperparameter optimization (maybe install from source)
$run_pip -q install --user scikit-optimize              # Hyperparameter optimization
$run_pip -q install --user pymc3                        # Markov Chain Monte Carlo

#-------------------------------------------------------------------------------
# NN
#-------------------------------------------------------------------------------

echo_color "-> Neural Networks (tensorflow, theano, keras)"

# Seemingly we get tensorflow without SSE3. Maybe rebuild?
$run_pip -q install --user tensorflow                   # NN
$run_pip -q install --user theano                       # NN
$run_pip -q install --user keras                        # NN
$run_pip -q install --user tflearn                      # NN
$run_pip -q install --user h5py                         # To be able to save weights in .h5 file

#-------------------------------------------------------------------------------
# Setting theano backend for Keras
#-------------------------------------------------------------------------------

echo_color "-> Setting theano backend for Keras"

# Doing 'import keras' to generate file '~/.keras/keras.json' to change keras backend
$run_python << EOF
import sys
try:
    import keras
    sys.exit(0)
except:
    sys.exit(1) 
EOF

# Changing keras backend
$run_python << EOF
import os
import sys
try:
    p = os.path.expanduser('~') + '/.keras/keras.json'
    with open(p, 'r') as f:
        keras = f.read()
    keras = keras.replace('tensorflow', 'theano')
    with open(p, 'w') as f:
        f.write(keras)
except:
    print('Error while changing keras backend:\n-> %s' % sys.exc_info()[1])
EOF

# Doing 'import keras' to demonstrate new backend
$run_python << EOF
import sys
try:
    import keras
    sys.exit(0)
except:
    sys.exit(1) 
EOF

#-------------------------------------------------------------------------------
# NLP
#-------------------------------------------------------------------------------

echo_color "-> Natural Language Processing (NLTK, TextBlob, gensim)"

$run_pip -q install --user nltk                         # NLP
$run_pip -q install --user textblob                     # NLP: sentiment, tagging
$run_python -m textblob.download_corpora > /dev/null    # NLTK data needed for textblob
# $run_pip -q install --user spacy                      # NLP
$run_pip -q install --user gensim                       # NLP
$run_pip -q install --user wordcloud                    # Word cloud

#-------------------------------------------------------------------------------
# Jupyter
#-------------------------------------------------------------------------------

echo_color "-> Jupyter Notebook"

$run_pip -q install --user jupyter                      # Jupyter Notebook

#-------------------------------------------------------------------------------
# Updating PATH, making it possible to run jupyter as command
#-------------------------------------------------------------------------------

echo_color "-> Adding Jupyter to PATH"

# Append command to the end of ~/.bashrc to have permanent path
echo 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc
# Execute ~/.bashrc to do export
. ~/.bashrc # or source ~/.bashrc

echo_color "-> Checking if we can run jupyter as command (if so - should see version number)"

# Check
echo_color "-> Jupyter version: $(jupyter --version 2>&1)"

# Run without browser
# jupyter notebook --no-browser

#-------------------------------------------------------------------------------
# Web and others
#-------------------------------------------------------------------------------

echo_color "-> Web tools and others (requests, pillow)"

$run_pip -q install --user pillow                       # Image processing
$run_pip -q install --user requests                     # HTTP
$run_pip -q install --user beautifulsoup4               # Web Scraping
$run_pip -q install --user scrapy                       # Web Scraping

#-------------------------------------------------------------------------------
# Building and installing XGBoost
#-------------------------------------------------------------------------------

echo_color "-> Installing XGBoost"

cd $workdir
git clone -q --recursive https://github.com/dmlc/xgboost
cd xgboost
make -j4  > /dev/null # may have troubles if use just -j without number
cd python-package
$run_python setup.py -q install --user

#-------------------------------------------------------------------------------
# Installing Regularized Greedy Forest (RGF) Python wrapper (with x64 binaries)
#-------------------------------------------------------------------------------

echo_color "-> Installing RGF"

cd $workdir
git clone -q https://github.com/vecxoz/rgf_python
cd rgf_python
$run_python setup.py -q install --user

#-------------------------------------------------------------------------------
# Building and installing Fast Regularized Greedy Forest (FastRGF)
# Multi-core implementation of RGF (Does not exactly reproduce original RGF results)
#-------------------------------------------------------------------------------

echo_color "-> Installing FastRGF"

cd $workdir
git clone -q https://github.com/baidu/fast_rgf

# Adding compilation parameter -pthread to deal with following error:
#   terminate called after throwing an instance of 'std::system_error'
#   what():  Enable multithreading to use std::thread: Operation not permitted
#   Command terminated by signal 6

$run_python << EOF
import sys
try:
    with open('./fast_rgf/CMakeLists.txt', 'r') as f:
        cmakelist = f.read()
    cmakelist = cmakelist.replace('set(CMAKE_CXX_FLAGS "-O3 -std=c++11")', 'set(CMAKE_CXX_FLAGS "-O3 -std=c++11 -pthread")')
    with open('./fast_rgf/CMakeLists.txt', 'w') as f:
        f.write(cmakelist)
except:
    print('Error while changing CMakeLists.txt:\n%s' % sys.exc_info()[1])
EOF

cd fast_rgf/build
{
cmake ..
make -j4
make install
} > /dev/null

#-------------------------------------------------------------------------------
# Building and installing LightGBM
#-------------------------------------------------------------------------------

echo_color "-> Installing LightGBM"

cd $workdir
git clone -q --recursive https://github.com/Microsoft/LightGBM
cd LightGBM
mkdir build
cd build
{
cmake ..
make -j4
} > /dev/null
cd ../python-package
$run_python setup.py -q install --user

#-------------------------------------------------------------------------------
# Building and installing Vowpal Wabbit
#-------------------------------------------------------------------------------

echo_color "-> Installing Vowpal Wabbit"

# Just in case VW can't find pyconfig.h
# export C_INCLUDE_PATH=$C_INCLUDE_PATH:/usr/include/python2.7:/usr/include/python3.4
# export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/include/python2.7:/usr/include/python3.4

# Build and install python package (with VW binaries)
$run_pip -q install --user vowpalwabbit

# Build VW standalone executable for direct use from command line
#
# cd ~
# git clone https://github.com/JohnLangford/vowpal_wabbit
# cd vowpal_wabbit
# make -j4 # exe will be located at ~/vowpal_wabbit/vowpalwabbit/vw
# make test # optional
# sudo make install # Without sudo we get: cp: cannot create regular file ‘/usr/local/bin/spanning_tree’: Permission denied
# Now the executable is located at /usr/local/bin/vw
# vw --version

# Another way to get exe
#
# curl http://finance.yendor.com/ML/VW/Binaries/vw-7.20150623 -o vw
# chmod +x vw
# ./vw --version

#-------------------------------------------------------------------------------
# Installing gplearn
#-------------------------------------------------------------------------------

echo_color "-> Installing gplearn (Genetic Programming)"

cd $workdir
git clone -q https://github.com/trevorstephens/gplearn
cd gplearn
$run_python setup.py -q install --user

#-------------------------------------------------------------------------------
# Installing StackNet
#-------------------------------------------------------------------------------

echo_color "-> Installing StackNet (Stacking tool)"

cd $workdir
git clone -q https://github.com/kaz-Anova/StackNet

#-------------------------------------------------------------------------------
# List installed packages and versions
#-------------------------------------------------------------------------------

echo_color "-> Listing installed Python packages and versions"

$run_python << EOF
import pip
# print('\n'.join(sorted(['%-40s %s' % (i.key, i.version) for i in pip.get_installed_distributions()])))
print('\n'.join(sorted(['%s' % ((i.key + '  ').ljust(40, '.') + '  ' + i.version) for i in pip.get_installed_distributions()])))
EOF

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------

cd ~
echo_color "-> SYSTEM IS READY"

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------


